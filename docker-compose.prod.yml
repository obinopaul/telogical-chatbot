# Production Docker Compose for Telogical Chatbot
# This is an alternative to docker/compose.production.yml with easier configuration
#
# Usage:
# 1. Copy .env.production.example to .env and fill in your values
# 2. Copy frontend/.env.production.example to frontend/.env.local and fill in your values  
# 3. Run: docker-compose -f docker-compose.prod.yml up -d
#
# For custom domains, update NEXTAUTH_URL and TELOGICAL_API_URL in environment files

version: '3.8'

services:
  # Backend Service
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    ports:
      - "8081:8081"
    env_file: 
      - .env
    environment:
      - HOST=0.0.0.0
      - PORT=8081
      - MODE=production
    volumes:
      - ./data:/app/data:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    ports:
      - "3000:3000"
    env_file:
      - frontend/.env.local
    environment:
      - NODE_ENV=production
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Optional: Add PostgreSQL if you want self-hosted database
  # Uncomment this section if not using external managed database
  # postgres:
  #   image: postgres:16
  #   environment:
  #     POSTGRES_DB: ${POSTGRES_DB:-telogical_prod}
  #     POSTGRES_USER: ${POSTGRES_USER:-telogical_user}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
  #   ports:
  #     - "5432:5432"
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-telogical_user}"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5
  #   restart: unless-stopped

networks:
  default:
    driver: bridge

# Uncomment if using self-hosted PostgreSQL
# volumes:
#   postgres_data:

# Production deployment notes:
# 1. Use a reverse proxy (nginx/traefik) for SSL termination
# 2. Set up proper domain names and SSL certificates
# 3. Use external managed database for better reliability
# 4. Configure monitoring and logging
# 5. Set up automated backups
# 6. Consider using Docker Swarm or Kubernetes for orchestration